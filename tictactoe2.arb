

class Game 
  attr_accessor :name, :player, :computer

  def initialize(name)
    @name = name
  end

  def print_welcome
    puts "Welcome to the Game of Tic-Tac-Toe!"
  end

  def choose_player_output
    puts "Choose X or O"
    @player = gets.chomp.upcase
    puts "@player: #{@player}"
  end

  def choose_computer_output
    if @player == "X"
      @computer = "O"
    elsif @player == "O"
      @computer = "X"
    end
  end
end



# for slots
class Slot < Game
  attr_accessor :name, :output, :a1, :a2, :a3, :b1, :b2, :b3, :c1, :c2, :c3, :game

  def initialize(name, output, game)
    @name = name
    @output = output
    @game = game
  end

  def make_new_slots
    # @a1 = Slot.new('a1', '_')
    # @a2 = Slot.new('a2', '_')
    # @a3 = Slot.new('a3', '_')
    # @b1 = Slot.new('b1', '_')
    # @b2 = Slot.new('b2', '_')
    # @b3 = Slot.new('b3', '_')
    # @c1 = Slot.new('c1', '_')
    # @c2 = Slot.new('c2', '_')
    # @c3 = Slot.new('c3', '_')
    @a1 = '_'
    @a2 = '_'
    @a3 = '_'
    @b1 = '_'
    @b2 = '_'
    @b3 = '_'
    @c1 = '_'
    @c2 = '_'
    @c3 = '_'
    self
  end

  def print_location
    puts
    puts '---slot location---'
    puts '[a1, a2, a3]'
    puts '[b1, b2, b3]'
    puts '[c1, c2, c3]'
    puts
  end

  def print_table
    list_a = [@a1, @a2, @a3]
    list_b = [@b1, @b2, @b3]
    list_c = [@c1, @c2, @c3]
    puts '---current table---'
    print list_a
    puts 
    print list_b
    puts 
    print list_c
    puts 
  end

def slot_selection
  loop do
    slot = ""
    puts "Choose a slot from the table"
    slot = gets.chomp
    case slot.downcase
    when 'a1'
      if @a1 == game.computer || @a1 == game.player 
        puts 'Occupied! Choose another position!'
        next
      else
        @a1 = game.player
        break 
      end
    when 'a2'
      if @a2 == game.computer || @a2 == game.player
        puts 'Occupied! Choose another position!'
        next
      else
        @a2 = game.player
        break
      end
    when 'a3'
      if @a3 == game.computer || @a3 == game.player
        puts 'Occupied! Choose another position!'
        next
      else
        @a3 = game.player
        break
      end
    when 'b1'
      if @b1 == game.computer || @b1 == game.player
        puts 'Occupied! Choose another position!'
        next
      else
        @b1 = game.player
        break
      end
    when 'b2'
      if @b2 == game.computer || @b2 == game.player
        puts 'Occupied! Choose another position!'
        next
      else
        @b2 = game.player
        break
      end
    when 'b3'
      if @b3 == game.computer || @b3 == game.player
        puts 'Occupied! Choose another position!'
        next
      else
        @b3 = game.player
        break
      end
    when 'c1'
      if @c1 == game.computer || @c1 == game.player
        puts 'Occupied! Choose another position!'
        next
      else
        @c1 = game.player
        break
      end
    when 'c2'
      if @c2 == game.computer || @c2 == game.player
        puts 'Occupied! Choose another position!'
        next
      else
        @c2 = game.player
        break
      end
    when 'c3'
      if @c3 == game.computer || @c3 == game.player
        puts 'Occupied! Choose another position!'
        next
      else
        @c3 = game.player
        break
      end
    end
  end
end

  def computer_selection
    loop do 
      computer_slot = ['a1', 'a2', 'a3', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3'].sample 
    case computer_slot
      when 'a1'
        if @a1 == game.player || @a1 == game.computer
          p computer_slot
          next
        else
          @a1 = game.computer
          break
        end
      when 'a2'
        if @a2 == game.player || @a2 == game.player
          p computer_slot
          next
        else
          @a2 = game.computer
          break
        end
      when 'a3'
        if @a3 == game.player || @a3 == game.player
          p computer_slot
          next
        else
          @a3 = game.computer
          break
        end
      when 'b1'
        if @b1 == game.player || @b1 == game.player
          p computer_slot
          next
        else
          @b1 = game.computer
          break
        end
      when 'b2'
        if @b2 == game.player || @b2 == game.player
          p computer_slot
          next
        else
          @b2 = game.computer
          break
        end
      when 'b3'
        if @b3 == game.player || @b3 == game.player
          p computer_slot
          next
        else
          @b3 = game.computer
          break
        end
      when 'c1'
        if @c1 == game.player || @c1 == game.player
          p computer_slot
          next
        else
          @c1 = game.computer
          break
        end
      when 'c2'
        if @c2 == game.player || @c2 == game.player
          p computer_slot
          next
        else
          @c2 = game.computer
          break
        end
      when 'c3'
        if @c3 == game.player || @c3 == game.player
          p computer_slot
          next
        else
          @c3 = game.computer
          break
        end
      end
      counter += 1
      break if counter > 10 # set a limit to the number of iterations
    end
  end

  
  def winning_combo?
    if @a1 == @a2 && @a2 == @a3 && @a1 != '_'
      return true, @a1  
    elsif @a1 == @b1 && @b1 == @c1 && @a1 != '_'
      return true, @a1 
    elsif @a3 == @b3 && @b3 == @c3 && @a3 != '_'
      return true, @a3
    elsif @a1 == @b2 && @b2 == @c3 && @a1 != '_'
      return true, @a1
    elsif @a3 == @b2 && @b2 == @c1 && @a3 != '_'
      return true, @a3 
    elsif @c1 == @c2 && @c2 == @c3 && @c1 != '_'
      return true, @c1
    else
      return false, 'not yet decided. keep going!'
    end
  end

  def the_winner?(mark)
    case mark
    when game.player
      return "player"
    when game.computer
      return "computer"
    end
  end
end





# slots = Slot.new('dummy name', 'dummy output')
# slots.make_new_slots.print_table
# slots.print_location
newgame = Game.new('dummy game')
newgame.print_welcome
newgame.choose_player_output
newgame.choose_computer_output
p "player:"
p newgame.player
p "computer:"
p newgame.computer
dummyslot = Slot.new('dummy slot', 'dummy output', newgame)
dummyslot.make_new_slots
loop do 
  p "player's turn:"
  dummyslot.print_location
  dummyslot.slot_selection
  p "computer's turn:"
  dummyslot.computer_selection
  dummyslot.print_table
  a_and_b = dummyslot.winning_combo?
  if a_and_b[0] == true
    puts "the winner is:"
    puts dummyslot.the_winner?(a_and_b[1]) 
    break
  else
    next
  end
end
